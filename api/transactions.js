// API para transa√ß√µes - Node.js

// Dados iniciais que ser√£o usados como fallback
const initialTransactions = [
  { id: 1, name: "Sal√°rio", value: 5000 },
  { id: 2, name: "Mercado", value: -350 },
  { id: 3, name: "Freelance", value: 1200 },
  { id: 4, name: "Sal√°rio", value: 2694 },
  { id: 5, name: "Sal√°rio", value: 2549 }
];

export default function handler(req, res) {
  // Configura√ß√£o CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  // Resposta para preflight requests
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    const { method, query, body } = req;

    console.log(`üîç API Request: ${method} ${req.url}`);

    switch (method) {
      case 'GET':
        // Retorna as transa√ß√µes iniciais
        console.log('üìä Retornando transa√ß√µes iniciais');
        res.status(200).json(initialTransactions);
        break;

      case 'POST':
        try {
          console.log('üìù Criando transa√ß√£o:', body);

          // Valida os dados
          if (!body.name || body.value === undefined) {
            res.status(400).json({
              error: 'Nome e valor s√£o obrigat√≥rios',
              details: 'Por favor, preencha todos os campos'
            });
            return;
          }

          // Cria nova transa√ß√£o
          const newTransaction = {
            id: Date.now(),
            name: String(body.name).trim(),
            value: parseFloat(body.value)
          };

          console.log('‚úÖ Transa√ß√£o criada:', newTransaction);
          res.status(201).json(newTransaction);
        } catch (error) {
          console.error('‚ùå Erro ao processar POST:', error);
          res.status(400).json({
            error: 'Dados inv√°lidos',
            details: 'Verifique o formato dos dados enviados'
          });
        }
        break;

      case 'PUT':
        try {
          const id = query.id || body.id;
          console.log('‚úèÔ∏è Atualizando transa√ß√£o:', id, body);

          // Valida os dados
          if (!body.name || body.value === undefined || !id) {
            res.status(400).json({
              error: 'ID, nome e valor s√£o obrigat√≥rios',
              details: 'Por favor, preencha todos os campos'
            });
            return;
          }

          // Atualiza transa√ß√£o
          const updatedTransaction = {
            id: parseInt(id),
            name: String(body.name).trim(),
            value: parseFloat(body.value)
          };

          console.log('‚úÖ Transa√ß√£o atualizada:', updatedTransaction);
          res.status(200).json(updatedTransaction);
        } catch (error) {
          console.error('‚ùå Erro ao processar PUT:', error);
          res.status(400).json({
            error: 'Dados inv√°lidos',
            details: 'Verifique o formato dos dados enviados'
          });
        }
        break;

      case 'DELETE':
        const deleteId = query.id;
        console.log('üóëÔ∏è Excluindo transa√ß√£o:', deleteId);

        if (!deleteId) {
          res.status(400).json({
            error: 'ID √© obrigat√≥rio para exclus√£o',
            details: 'Informe o ID da transa√ß√£o a ser exclu√≠da'
          });
          return;
        }

        const deletedTransaction = {
          id: parseInt(deleteId),
          deleted: true,
          message: 'Transa√ß√£o exclu√≠da com sucesso'
        };

        console.log('‚úÖ Transa√ß√£o exclu√≠da:', deletedTransaction);
        res.status(200).json(deletedTransaction);
        break;

      default:
        console.log('‚ùå M√©todo n√£o permitido:', method);
        res.status(405).json({
          error: `M√©todo ${method} n√£o permitido`,
          allowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
        });
    }
  } catch (error) {
    console.error('‚ùå Erro geral na API:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      details: 'Tente novamente em alguns instantes',
      timestamp: new Date().toISOString()
    });
  }
} 