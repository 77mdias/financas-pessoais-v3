// Vers√£o simplificada sem imports externos para uso direto no navegador
// import { TransactionManager } from '../../src/managers/TransactionManager.js';

/**
 * Aplica√ß√£o principal de Finan√ßas Pessoais
 * Vers√£o standalone sem depend√™ncias externas
 */
class FinanceApp {
  constructor() {
    this.transactions = [];
    this.isInitialized = false;
    this.apiBaseUrl = 'http://localhost:3001/transactions';
  }

  /**
   * Inicializa a aplica√ß√£o
   */
  async init() {
    try {
      console.log('üöÄ Iniciando aplica√ß√£o de Finan√ßas Pessoais...');

      // Verifica se o DOM est√° carregado
      if (document.readyState === 'loading') {
        await this.waitForDOMReady();
      }

      // Configura eventos
      this.setupEventListeners();

      // Carrega transa√ß√µes
      await this.loadTransactions();

      // Configura tratamento de erros globais
      this.setupGlobalErrorHandling();

      // Configura funcionalidades extras
      this.setupExtraFeatures();

      this.isInitialized = true;
      console.log('‚úÖ Aplica√ß√£o inicializada com sucesso!');

    } catch (error) {
      console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
      this.showInitializationError(error);
    }
  }

  /**
   * Configura os event listeners
   */
  setupEventListeners() {
    const form = document.getElementById('transaction-form');
    const cancelBtn = document.getElementById('cancel-btn');

    if (form) {
      form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => this.cancelEdit());
    }
  }

  /**
   * Carrega transa√ß√µes da API
   */
  async loadTransactions() {
    try {
      const response = await fetch(this.apiBaseUrl);
      if (!response.ok) throw new Error('Erro ao carregar transa√ß√µes');

      this.transactions = await response.json();
      this.renderTransactions();
      this.updateBalance();

      console.log(`üìä ${this.transactions.length} transa√ß√µes carregadas`);
    } catch (error) {
      console.error('‚ùå Erro ao carregar transa√ß√µes:', error);
      this.showError('Erro ao carregar transa√ß√µes. Verifique se o json-server est√° rodando na porta 3001.');
    }
  }

  /**
   * Manipula o envio do formul√°rio
   */
  async handleSubmit(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const name = document.getElementById('name').value;
    const value = parseFloat(document.getElementById('value').value);

    if (!name || isNaN(value)) {
      this.showAlert('Por favor, preencha todos os campos corretamente.');
      return;
    }

    const transactionData = { name, value };

    const editingId = event.target.dataset.editingId;
    if (editingId) {
      await this.updateTransaction(editingId, transactionData);
    } else {
      await this.createTransaction(transactionData);
    }
  }

  /**
   * Cria uma nova transa√ß√£o
   */
  async createTransaction(transactionData) {
    try {
      const response = await fetch(this.apiBaseUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(transactionData)
      });

      if (!response.ok) throw new Error('Erro ao criar transa√ß√£o');

      const newTransaction = await response.json();
      this.transactions.push(newTransaction);

      this.renderTransactions();
      this.updateBalance();
      this.resetForm();
      this.showSuccess('Transa√ß√£o criada com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao criar transa√ß√£o:', error);
      this.showAlert('Erro ao criar transa√ß√£o. Tente novamente.');
    }
  }

  /**
   * Atualiza uma transa√ß√£o
   */
  async updateTransaction(id, transactionData) {
    try {
      const response = await fetch(`${this.apiBaseUrl}/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(transactionData)
      });

      if (!response.ok) throw new Error('Erro ao atualizar transa√ß√£o');

      const updatedTransaction = await response.json();
      const index = this.transactions.findIndex(t => t.id == id);
      if (index !== -1) {
        this.transactions[index] = updatedTransaction;
      }

      this.renderTransactions();
      this.updateBalance();
      this.resetForm();
      this.showSuccess('Transa√ß√£o atualizada com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar transa√ß√£o:', error);
      this.showAlert('Erro ao atualizar transa√ß√£o. Tente novamente.');
    }
  }

  /**
   * Exclui uma transa√ß√£o
   */
  async deleteTransaction(id) {
    if (!confirm('Tem certeza que deseja excluir esta transa√ß√£o?')) return;

    try {
      const response = await fetch(`${this.apiBaseUrl}/${id}`, {
        method: 'DELETE'
      });

      if (!response.ok) throw new Error('Erro ao excluir transa√ß√£o');

      this.transactions = this.transactions.filter(t => t.id != id);
      this.renderTransactions();
      this.updateBalance();
      this.showSuccess('Transa√ß√£o exclu√≠da com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao excluir transa√ß√£o:', error);
      this.showAlert('Erro ao excluir transa√ß√£o. Tente novamente.');
    }
  }

  /**
   * Inicia a edi√ß√£o de uma transa√ß√£o
   */
  editTransaction(id) {
    const transaction = this.transactions.find(t => t.id == id);
    if (!transaction) return;

    document.getElementById('name').value = transaction.name;
    document.getElementById('value').value = transaction.value;

    const form = document.getElementById('transaction-form');
    const submitBtn = document.getElementById('submit-btn');
    const cancelBtn = document.getElementById('cancel-btn');

    form.dataset.editingId = id;
    submitBtn.textContent = 'Atualizar Transa√ß√£o';
    cancelBtn.style.display = 'inline-block';
  }

  /**
   * Cancela a edi√ß√£o
   */
  cancelEdit() {
    this.resetForm();
  }

  /**
   * Reseta o formul√°rio
   */
  resetForm() {
    const form = document.getElementById('transaction-form');
    const submitBtn = document.getElementById('submit-btn');
    const cancelBtn = document.getElementById('cancel-btn');

    form.reset();
    delete form.dataset.editingId;
    submitBtn.textContent = 'Adicionar Transa√ß√£o';
    cancelBtn.style.display = 'none';
  }

  /**
   * Renderiza as transa√ß√µes na tela
   */
  renderTransactions() {
    const container = document.getElementById('transactions-list');
    if (!container) return;

    if (this.transactions.length === 0) {
      container.innerHTML = '<p>Nenhuma transa√ß√£o cadastrada.</p>';
      return;
    }

    container.innerHTML = this.transactions.map(transaction => `
      <div class="transaction-item ${transaction.value >= 0 ? 'income' : 'expense'}">
        <div class="transaction-info">
          <strong>${transaction.name}</strong>
          <span class="transaction-value">
            R$ ${transaction.value.toFixed(2).replace('.', ',')}
          </span>
        </div>
        <div class="transaction-actions">
          <button onclick="app.editTransaction(${transaction.id})" class="edit-btn">‚úèÔ∏è</button>
          <button onclick="app.deleteTransaction(${transaction.id})" class="delete-btn">üóëÔ∏è</button>
        </div>
      </div>
    `).join('');
  }

  /**
   * Atualiza o saldo total
   */
  updateBalance() {
    const balance = this.transactions.reduce((total, t) => total + (t.value || 0), 0);
    const balanceElement = document.getElementById('balance');
    if (balanceElement) {
      balanceElement.textContent = balance.toFixed(2).replace('.', ',');
      balanceElement.className = balance >= 0 ? 'positive' : 'negative';
    }
  }

  /**
   * Mostra mensagem de sucesso
   */
  showSuccess(message) {
    // Implementa√ß√£o simples - voc√™ pode melhorar isso
    alert('‚úÖ ' + message);
  }

  /**
   * Mostra mensagem de erro
   */
  showAlert(message) {
    alert('‚ö†Ô∏è ' + message);
  }

  /**
   * Mostra erro geral
   */
  showError(message) {
    console.error(message);
    alert('‚ùå ' + message);
  }

  /**
   * Calcula estat√≠sticas das transa√ß√µes
   */
  calculateStatistics() {
    const income = this.transactions.filter(t => t.value > 0);
    const expenses = this.transactions.filter(t => t.value < 0);
    const totalIncome = income.reduce((sum, t) => sum + t.value, 0);
    const totalExpenses = Math.abs(expenses.reduce((sum, t) => sum + t.value, 0));

    return {
      totalTransactions: this.transactions.length,
      totalIncome,
      totalExpenses,
      balance: totalIncome - totalExpenses,
      incomeCount: income.length,
      expenseCount: expenses.length
    };
  }

  /**
   * Exporta transa√ß√µes para JSON
   */
  exportTransactions() {
    const dataStr = JSON.stringify(this.transactions, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);

    const link = document.createElement('a');
    link.href = url;
    link.download = `transacoes_${new Date().toISOString().split('T')[0]}.json`;
    link.click();

    URL.revokeObjectURL(url);
  }

  /**
   * Aguarda o DOM estar completamente carregado
   */
  waitForDOMReady() {
    return new Promise((resolve) => {
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        resolve();
      } else {
        document.addEventListener('DOMContentLoaded', resolve);
      }
    });
  }

  /**
   * Configura tratamento de erros globais
   */
  setupGlobalErrorHandling() {
    window.addEventListener('error', (event) => {
      console.error('‚ùå Erro global capturado:', event.error);
    });

    window.addEventListener('unhandledrejection', (event) => {
      console.error('‚ùå Promise rejeitada n√£o tratada:', event.reason);
    });
  }

  /**
   * Configura funcionalidades extras da aplica√ß√£o
   */
  setupExtraFeatures() {
    // Adiciona atalhos de teclado
    this.setupKeyboardShortcuts();

    // Adiciona informa√ß√µes de debug no console
    this.setupDebugInfo();

    // Configura visibilidade da p√°gina
    this.setupPageVisibility();
  }

  /**
   * Configura atalhos de teclado
   */
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (event) => {
      // Ctrl/Cmd + N = Nova transa√ß√£o (foca no campo nome)
      if ((event.ctrlKey || event.metaKey) && event.key === 'n') {
        event.preventDefault();
        const nameInput = document.getElementById('name');
        if (nameInput) {
          nameInput.focus();
        }
      }

      // Escape = Cancelar edi√ß√£o
      if (event.key === 'Escape') {
        const form = document.getElementById('transaction-form');
        if (form && form.dataset.editingId) {
          this.cancelEdit();
        }
      }
    });
  }

  /**
   * Configura informa√ß√µes de debug
   */
  setupDebugInfo() {
    // Adiciona m√©todos de debug ao objeto window
    window.financeApp = {
      getTransactions: () => this.transactions,
      getStatistics: () => this.calculateStatistics(),
      exportData: () => this.exportTransactions(),
      refresh: () => this.loadTransactions(),
      version: '2.0.0',
      architecture: 'Modular'
    };

    console.log('üîß Ferramentas de debug dispon√≠veis em window.financeApp');
  }

  /**
   * Configura comportamento quando a p√°gina fica vis√≠vel/invis√≠vel
   */
  setupPageVisibility() {
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible' && this.isInitialized) {
        // Recarrega dados quando a p√°gina volta a ficar vis√≠vel
        console.log('üëÅÔ∏è P√°gina ficou vis√≠vel, recarregando dados...');
        this.loadTransactions();
      }
    });
  }

  /**
   * Mostra erro de inicializa√ß√£o
   */
  showInitializationError(error) {
    const container = document.querySelector('.container');
    if (container) {
      container.innerHTML = `
        <div style="text-align: center; padding: 50px; background: white; border-radius: 10px; margin: 20px;">
          <h2 style="color: #e53e3e; margin-bottom: 20px;">‚ùå Erro de Inicializa√ß√£o</h2>
          <p style="margin-bottom: 20px;">N√£o foi poss√≠vel inicializar a aplica√ß√£o.</p>
          <p style="margin-bottom: 20px; color: #666;">Erro: ${error.message}</p>
          <button onclick="location.reload()" style="padding: 10px 20px; background: #667eea; color: white; border: none; border-radius: 5px; cursor: pointer;">
            üîÑ Recarregar P√°gina
          </button>
        </div>
      `;
    }
  }

  /**
   * Obt√©m informa√ß√µes sobre o estado da aplica√ß√£o
   */
  getAppInfo() {
    return {
      initialized: this.isInitialized,
      version: '2.0.0',
      architecture: 'Modular',
      modules: [
        'TransactionManager',
        'TransactionService',
        'UIManager',
        'Formatter'
      ],
      features: [
        'CRUD completo',
        'Valida√ß√£o de dados',
        'Interface responsiva',
        'Tratamento de erros',
        'Atalhos de teclado',
        'Debug tools'
      ]
    };
  }
}

// Inicializa a aplica√ß√£o
const app = new FinanceApp();
app.init();

// Exporta para uso global se necess√°rio
window.app = app;

// Log de inicializa√ß√£o
console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üí∞ FINAN√áAS PESSOAIS V2.0       ‚ïë
‚ïë                                      ‚ïë
‚ïë  üèóÔ∏è  Arquitetura Modular             ‚ïë
‚ïë  üì¶ M√≥dulos ES6                      ‚ïë
‚ïë  üé® Interface Moderna                ‚ïë
‚ïë  üîß Ferramentas de Debug             ‚ïë
‚ïë                                      ‚ïë
‚ïë  Desenvolvido com ‚ù§Ô∏è em JavaScript   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`); 